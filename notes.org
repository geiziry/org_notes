

#+COLUMNS: %25ITEM %15TODO %3PRIORITY %TAGS
* Passing by value
  normal parameters in function will take copy of parameters to pass to the function .
  this is very expensive for processing images for example as it can cause of alot of memory usage.
* Passing by reference
  by adding '&' after the type of the parameter, this is useful when change on the original value is needed.
* Passing by const reference
  by adding 'const&' this will observe the original parameter without changing its original value, and without creating copies of the original parameters,
  it's useful if working on big pbjects like images, and it also makes sense when working with strings


* c++11 features
  int Round(double x) is the same as auto Round(double x)->int. this is called trailing return types

* Sequence of items STL (Standard Template Library) vector
  in c++ collections are called containers

* vector initialization
  vector<int> v{10}; -> produces a vector with one element 10
  vector<int> w(10); -> produces a vector with 10 elements
  
  #+BEGIN_SRC c++
    for(auto const& e : v){
      //Process 'e'...
     }
    #+END_SRC

* Iterators

** ++it: advance
   used to advance the iterator

** *it: deref
   used to get the value of the iterator at the current pointer

* classes
  class has to be trailed with semiolon ';'
#+BEGIN_SRC c++
  class Rectangle{
    
  };
#+END_SRC
** constructors:
  default ctor
  #+BEGIN_SRC c++
    class Rectangle{
      Rectangle()=default;
    }
  #+END_SRC
  ctor with parameters
#+BEGIN_SRC c++
  class Rectangle{
    Rectangle()=default;
    Rectangle(double width, double height)
      :(width_{width}, height_{height}) {}
  }
#+END_SRC
  
** readonly getters defined by adding 'const' 
   methods that don't change the class state should has the 'const'

* header files
  used to reference class from multiple places in code
#+BEGIN_SRC c++
  #ifndef RECTANGLE_H \\if not defined
  #define RECTANGLE_H
  class Rectangle{
    
  }
  #endif
#+END_SRC

any directive starts with # is instruction to the preprocessor, runs before the compiler
inline methods (less than 10 lines) should be included in the header files, otherwise source files should be used
never use 'using namespace' in header files, as it's going to be pasted in cpp files and then we may get ambiguity

'::' ==> scope resolution operator

* source files
  used to separate implementation from the declaration in the header files
#+BEGIN_SRC c++
  #include "Rectangle.h"

  Rectangle::Rectangle(double width, double height)
        :width_{width}, height_{height} {}

  double Rectangle::Width() const {return width_;}
   double Rectangle::Height() const {return height_;}
#+END_SRC

* c++ calculations
  if all numbers participating in calculation are int ===> then the result is int
#+BEGIN_SRC c++
  int main(){
    float f=9/5; //this will produce 1
    float f=9.0/5; // this will ptoduce 1.8
  }
#+END_SRC

* class initialization
  Account acct; ==> initialize properly
  Account acct(); ==> this will declare a function that returns Account type;


  '*=' ==> multiply by same as '+=' which is add by

* free store Memory management (Raw pointers)
  must be learnet from modern materials only

* legacy constructors
** casting 
   int t=(int)5.8; ==> this is legacy --> is equ to static_cast<int>(5.8)

** Macros
   #define --> to set const #define Pi 3.14 --> equ to const double Pi=3.14
           --> to create functions

* operator overloading
  to write operator overload
#+BEGIN_SRC c++
  bool operator <(Account& acc){
    return balance<acc.balance;
  }
#+END_SRC

* Templates
  are like generics in c#, but much faster as it's resolved at compile time not runtime
#+BEGIN_SRC c++ ==> this is function template
    template <class T>
    T max(T& t1, T& t2){
      return t1 <t2? t2 : t1;
    }
  max(t1,t2);
#+END_SRC

#+BEGIN_SRC c++ ==> this is class template
  template <class T>
  class Accum{
  private:
    T total;
  public:
    Accum(T start): total(start){};
    T operatot+=(const T& t){return total = total + t;};
    T GetTotal(){return total;}
  };

Accum<int> integers(0);
#+END_SRC
specialized template: used to create template for specific type
#+BEGIN_SRC c++
  template <>
  class Accum<Person>
{
  private:
   int total;
  public:
    Accum(T start): total(start){};
    int operatot+=(Person& t){return total = total + t;};
    int GetTotal(){return total;}
  };

#+END_SRC
* Pointers
#+BEGIN_SRC c++
a pointer that stores the value of 0 is called a null pointer
int* pA = &A; // --> this is a pointer to A address - & before variable gets its address
*pA =5; // this will sets the value of the variable stored in this memory address
(*p).memberVariable; //to call member variable on the target of the pointer it has to be in '()',
p->.memberVariable;// or for short 'p->' but for class types only not for fundamental types like int
void GetName(Person& p);  // -& after type is call by reference
#+END_SRC
  nullptr or NULL used not to point to anything

*** The symbol * is used in two different ways in connection with pointers:
 **** It can serve as a type modifier in a pointer variable definition.
 **** It can be used as the dereference operator.

** shared pointer
** weak pointer
** unique pointer
** pass-by-pointer or pass-by-reference
it's preferable to use pass-by-reference,
only when needed to manage objects(creation, destruction, adding to a managed container), pointers are needed

* Free Store (known  as the heap)
  used to create long lived variables
** create with 'new' which gives a pointer
** tear down with 'delete'
* Rule of three for Manual Memory Management
  Copy Constructor, Copy Assignmnet Operator, Destructor
* Exceptions
** always catch by reference, to avoid slicing and to get complete info about the exception type, not just the base class of the exception.
** we can have many number of catch blocks, but the more specific has to be at the top.

* smart pointer:
  is an object that stores and manages a pointer to a heap object,
  it automatically deletes the heap object at the appropiate time.
       QT====> QPointer
       STL===> auto_ptr
       BOOSt=> shared_ptr

*** 1. If we want to make sure that ptr cannot point to any other memory location, we can write it one of two ways:
#+BEGIN_SRC C++
Type* const ptr = &vbl;
Type* const ptr(&vbl);
#+END_SRC
The pointer is a const but the addressed object can be changed.

*** 2. If we want to make sure that the value of vbl cannot be changed by dereferencing ptr, we can write it in two ways:
#+BEGIN_SRC C++
const Type* ptr = &vbl;
const Type* ptr(&vbl);
#+END_SRC

*** 3. In addition, if we want to impose both kinds of protection we can write:
#+BEGIN_SRC C++
const Type* const ptr = &vbl;
const Type* const ptr(&vbl);
#+END_SRC

*** It is okay to assign the address of a variable to a pointer to const. It is an error to
assign the address of a const object to an unrestricted (i.e., non-const) pointer
variable because that would allow the const object's value to be changed.
#+BEGIN_SRC C++
int a = 1;
const int c = 2;
const int* p1 = &c; // OK
const int* p2 = &a; // OK
int* p3 = &c; // error
*p3 = 5; // error
#+END_SRC


* Reference Variables
**  lvalue ==> is an expression that refers to an object
*** ex. array cells, variables and dereferenced pointers
*** i+3 or 3 are not lvalues
* Class member access specifiers
** A public member can be accessed (using an object of the class1) anywhere in a program that #includes the class definition file.
** A puvlic static can be accessed without an object.
** A protected member can be accessed inside the definition of a member function of its own class, or a member function of a derived class.
** A private member is only accessible by member functions of its own class, and also accessible by friends of the calss.
   struct is a class in which members are by default public.
* Ctors
  any ctor with single argument of different type==> is conversion ctor
  default assignment operator provided by compiler is ==> 
  #+BEGIN_SRC c++
      Fraction& operator=(const Fraction& fobj);//Default assignment operator, performs memberwise assignment
      Fraction(int numer, int denom=1):numer(m_Numer),denom(m_Denomer){} //conversion ctor since the second argument is optional
      Fraction f=19;//compiler checks to see if it can convert int 19 to Fraction, which is possible using the above conversion ctor
      //so it trys to call the conversion ctor, and then the default assignment operator implicitly
      //to avoid this behavior we can add the keyword 'explicit', means the ctor can only be called 'explicitly', and can't be called implicitly. 
  #+END_SRC
* Functions Inlining

** An inline function must be defined before it is called (a declaration is not enough).
** An inline definition can only occur once in any source code module.
** If a class member function's definition appears inside the class definition,the function is implicitly inline.
** If a function is too complex, or the compiler options are switched, the compiler may ignore the inline directive.Most compilers refuse to inline functions that contain:
*** while, for, do . . . while statements
*** switch statements
*** More than a certain number of lines of code
* Functions Declaration
functions must be declared before it's used for the first time (function prototype)
* Function Overloading
in C++ return type is not part of the signature (which consists of function's name and parameter list), const is part of the signature
* Inheritance
  three kinds of derivation public, protected and private
** abstract class:
*** is a class has at least one pure virtual function 
#+BEGIN_SRC C++
virtual double area()=0;
#+END_SRC
*** there are no public ctor
* Function Hiding
derived class function can be called directly.
class scope resolution operator can be used to call the base class hidden function explicitly.
* Dependency Management
**  compile-time --> if progElement1 is required to compile progElement2
** link-time --> if progElement1.h needs to be included in progElement2.cpp
* Forward declaration
  allows to use the class type for pointers and references ,not dereferenced before the class definition is encountered.
  this allows classes to have circular relationships, without having circular dependencies between header files (which is not permitted by the compiler).
** Important Rule:
   Don't use #include if forward declaration will suffice
* Installing libraries
  two variables in the pro file need to be specified--> 
#+BEGIN_SRC C++
 TEMPLATE= lib          #Build this as library
 DESTDIR= $$(CPPLIBS)   #Place the compiled shared object here
#+END_SRC
#+BEGIN_SRC c++
  make install 
   \\ will generate the Make file with install target
  target.path=/usr/lib
  INSTALLS += target
#+END_SRC
* Design Patterns
** Creational Patterns
   manage the creation of objects
** Structural Patterns
   describe how objects are connected together to form more complex objects
** Behavioral patterns
   used to describe how code is organized, to assign responsibility or role to ceratain classes, and to specify the way objects communicate with each other.
* Signals and Solts
#+BEGIN_SRC c++
qApp->exec(); //main thread of the application enters into the message loop, which allows QObjects to send messages to one another
#+END_SRC
** signal
   is a message like void function declaration, it has a parameter list but no function body,
   it's part of the class interface, but can't be called__it must be 'emitted' by an object of that class
   it's implicitly protected
** slot
   is a void member function, and can be called as a normal member function

signal of one object can be connected to slots of one or more other objects, provided:
*** object exist
*** parameter lists are assignment compatible from the signal to the slot
#+BEGIN_SRC c++
bool QObject::connect(senderqobjptr,
                      SIGNAL(signalname(argtypelist)),
                      receiverqobjptr,
                      SLOT(slotname(argtypelist))
                      optionalConnectionType);
#+END_SRC
* QObject
  The designers of QObject asserted an unequivocal 'no copy' policy by designating
its assignment operator and copy constructor private. This effectively
prevents the compiler from generating assignment operators and copy constructors
for QObject-derived classes.
** One consequence of this scheme is that any attempt to pass or return QObject-derived classes by value to or from functions results in a compile-time error.
* Generics and Templates
  Templates provide a means for C++ to generate different versions of classes and functions with parameterized types and common behavior.
** template parameter can be used to pass type experessions as well as variables and values
#+BEGIN_SRC c++
template <class T > class String { ... };
template <class T, int max > Buffer { ...
T v[max];
};
String <char> s1;
Buffer <int, 10> intBuf10;
#+END_SRC
* Qt Containers
** Managed containers 'composite as it manages its childern'
deletes any heap objects it "owns" when the container is destroyed
** UnManaged containers 'aggregates'
with Qt container of pointers qDeleteAll(container) can be used which calls delete on each element in the container
* Operators
| Operators types              | list of operators           |
|------------------------------+-----------------------------|
| Assignment operators         | =, +=, *=,...               |
| Arithmetic operators         | +, -, *, /, %               |
| Relational operators         | <, <=, >, >=, ==, !=        |
| Logical operators            | &&, \vert \vert, !          |
| Bitwise operators            | &, \vert, ^, ~, <<, >>      |
| Memory management oprators   | new, delete, sizeof         |
| Pointer and access operators | *, &, ., ->, [], ()         |
| Scope resolution operators   | ::                          |
| Miscellaneous operators      | conditional (? :), comma(,) |
* C++ Operators Detailed
** 
| Operator         | Operands | Description                                     | Example                          | A | Ovl |
|------------------+----------+-------------------------------------------------+----------------------------------+---+-----|
| ::               | one      | Global Scope Resolution                         | :: name                          | R | N   |
| ::               | two      | class/namespace scope resolution                | className::memberName            | L | N   |
| ->               | two      | Member selector via ptr                         | ptr->memberName                  | L | N   |
| .                | two      | Member  selector via obj                        | obj.memberName                   | L | N   |
| ->               | one      | Smart ptr                                       | obj->member                      | R | M   |
| [ ]              | two      | Subscript operator                              | ptr[expr]                        | L | M   |
| ( )              | any      | a Function call                                 | function(argList)                | L | N   |
| ( )              | any      | Value construction                              | className(argList)               | L | M   |
| ++               | one      | Post increment                                  | varName++                        | R | Y   |
| --               | one      | Post decrement                                  | varName--                        | R | Y   |
| typeid           | one      | Type identification                             | typeid( type ) or typeid( expr ) | R | N   |
| dynamic_cast     | two      | runtime checked conv                            | dynamic_cast< type >( expr )     | L | N   |
| static_cast      | two      | compile time checked conv                       | static_cast< type >( expr )      | L | N   |
| reinterpret_cast | two      | unchecked conv reinterpret_cast< type >( expr ) | L                                | N |     |
| const_cast       | two      | const conv                                      | const_cast< type >( expr )       | L | N   |
| sizeof           | one      | Size in bytes                                   | sizeof expr or sizeof( type )    | R | N   |
| ++               | one      | Pre Increment                                   | ++varName                        | R | Y   |
| --               | one      | Pre Decrement                                   | --varName                        | R | Y   |
| ~                | one      | Bitwise negation                                | ~ expr                           | R | Y   |
| !                | one      | Logical negation                                | ! expr                           | R | Y   |
| +, -             | one      | Unary plus, unary minus                         | + expr or -expr                  | R | Y   |
| *                | one      | Pointer dereference                             | * ptr                            | R | Y   |
| &                | one      | Address -of                                     | & lvalue                         | R | Y   |
| new              | one      | Allocate                                        | new type or new type(exprlist)   | R | Y   |
| new [ ]          | two      | Allocate array                                  | new type [ size ]                | L | Y   |
| delete           | one      | Deallocate                                      | delete ptr                       | R | Y   |
| delete [ ]       | one      | Deallocate array                                | delete [ ] ptr                   | R | M   |
| ( )              | two      | C-style type cast                               | ( type ) expr                    | R | N   |
| ->*              | two      | Member ptr selector via ptr                     | ptr->*ptrToMember                | L | M   |
| .*               | two      | Member ptr selector via obj                     | obj.*ptrToMember                 | L | N   |
| *                | two      | Multiply                                        | expr1 * expr2                    | L | Y   |
| /                | two      | Divide                                          | expr1 / expr2                    | L | Y   |
| %                | two      | Remainder                                       | expr1 % expr2                    | L | Y   |
| +                | two      | Add                                             | expr1 + expr2                    | L | Y   |
| -                | two      | Subtract                                        | expr1 - expr2                    | L | Y   |
| <<               | two      | Bitwise left shift                              | expr << shiftAmt                 | L | Y   |
| >>               | two      | Bitwise right shift                             | expr >> shiftAmt                 | L | Y   |
| <                | two      | Less than                                       | expr1 < expr2                    | L | Y   |
| <=               | two      | Less or equal                                   | expr1 <= expr2                   | L | Y   |
| >                | two      | Greater                                         | expr1 > expr2                    | L | Y   |
| >=               | two      | Greater or equal                                | expr1 >= expr2                   | L | Y   |
| ==               | two      | Equals c                                        | expr1 == expr2                   | L | Y   |
| !=               | two      | Not equal                                       | expr1 != expr2                   | L | Y   |
| &                | two      | Bitwise AND                                     | expr1 & expr2                    | L | Y   |
| ^                | two      | Bitwise XOR (exclusive OR)                      | expr1 ^ e2                       | L | Y   |
| \vert            | two      | Bitwise OR (inclusive OR)                       | expr1 \vert expr2                | L | Y   |
| &&               | two      | Logical AND                                     | expr1 && expr2                   | L | Y   |
| \vert \vert      | two      | Logical OR                                      | expr1 \vert \vert expr2          | L | Y   |
| =                | two      | Assign                                          | expr1 = expr2                    | R | Y   |
| *=               | two      | Multiply and assign                             | expr1 *= expr2                   | R | Y   |
| /=               | two      | Divide and assign                               | expr1 /= expr2                   | R | Y   |
| %=               | two      | Modulo and assign                               | expr1 %= expr2                   | R | Y   |
| +=               | two      | Add and assign                                  | expr1 += expr2                   | R | Y   |
| -=               | two      | Subtract and assign                             | expr1 -= expr2                   | R | Y   |
| <<=              | two      | Left shift and assign                           | expr1 <<= expr2                  | R | Y   |
| >>=              | two      | Right shift and assign                          | expr1 >>= expr2                  | R | Y   |
| &=               | two      | And and assign                                  | expr1 &= expr2                   | R | Y   |
| \vert=           | two      | Inclusive or and assign                         | expr1 \vert= expr2               | R | Y   |
| ^=               | two      | Exclusive or and assign                         | expr1 ^= expr2                   | R | Y   |
| ? :              | three    | Conditional expression                          | bool ? expr : expr               | L | N   |
| throw            | one      | Throw exception                                 | throw expr                       | R | N   |
| ,                | two      | Sequential Evaluation(comma)                    | expr , expr                      | L | Y   |


* Hierarchy of Basic Types
#+CAPTION: Hierarchy of Basic Types
[[https://github.com/geiziry/org_notes/blob/master/Hierarchy%20of%20Basic%20Types.png]]



* Casting
#+CAPTION: ANSI Typecasts
| static_cast< type >( expr )      | For converting between related types                     |
| const_cast< type > expr          | For casting away const or volatile                       |
| dynamic_cast< type >( expr )     | For safe navigation through an inheritance hierarchy     |
| reinterpret_cast< type >( expr ) | For type conversions of pointers between unrelated types |
|                                  |                                                          |

** static_cast
  #+BEGIN_SRC c++
  static_cast<DestType>(expr) //converts expr to DestType, provided the compiler knows of an implicit conversion from expr to DestType 
  #+END_SRC
   static_cast can't cast away constness, for that const_cast<> must be used
** const_cast
   #+BEGIN_SRC c++
   const_cast<DestType>(expr) //creates a non-const version of expr
   #+END_SRC
In general, const_cast is used only on const -references and pointers to non-const objects. 
Using const_cast to change const objects has undefined behavior because const objects may be stored in read-only memory (which the operating system protects).
if the const object to be casted away const, is on stack attempting to change its memory will not cause segmentation fault.
** reinterpret_cast
#+BEGIN_SRC c++
Spam spam;
Egg* eggP;
eggP = reinterpret_cast<Egg*>(&spam);
eggP->scramble();
#+END_SRC
reinterpret_cast takes some spam and gives us an Egg -shaped pointer, without concern for type-compatibility.
 eggP is reinterpreting the bits of spam as if they were
bits of egg.
* Runtime Type Identification (RTTI)
** downcasting:
   conversion of a base class pointer to derived class pointer.
* Member Selection
  A pointer <T> is said to be a guarded pointer to a QObject of type T if the pointer is automatically set to 0 when its object is destroyed.
  QSharedPointer , QPointer , and QWeakPointer all provide this functionality as well.
* Scope And Storage Class
  Identifiers have scope , objects have a storage class , and variables have both.
**  Declaring name:
    means telling the complier what type to associate with this name
**  Defining an object or variable: 
    means allocating memory for that object, and optionally assigning initial value.
**  Definging a function:
    describing its behavior in a block of c++ statement.
**  Defining a class:
    means specifing its structure in a sequence of declarations of functions and data members.

*** Each declaration that is not a definition conveys an implicit promise to the compiler (which will be enforced by the linker),that the declared name will be defined in an appropriate location somewhere else in the program.

*** All objects and variables should be properly initialized at (or immediately after) creation time.

* Identifier Scopes

** Block scope
** Function scope
** Class scope
** Namespace scope
   An identifier in a namespace can be made available globally through the use of
   the scope resolution operator , NamespaceName:: .
   It can also be made avail able to other scopes without using scope resolution through the using
keyword.
** File scope
   if not within curly braces {...}, and is declared static.
   Its scope extends from the declaration to the end of the file.
   The keyword static hides the identifier from other source files and restricts its scope to the file in which it was declared.
   can't be declared extern and accessed fro other source files.
** Global scope
   if not within curly braces {...}, and is not declared static.
   can be extended to other source files, by using the keyword extern.
** Globals and const
   has file scope, but can be exported to other files by declaring it 'extern'
* Storage Class
  4 places to allocate space when object is created
** static
   lifetime begins when objct's module is loaded, and ends when program terminates
** stack
   allocated automatically when object definition is executed, lifetime is determined by the braces around the code that is executed.
** heap
   objects created via 'new', lifetime is determined by the use of 'new' and 'delete'.
** register
   small quantity of fastest memory, located on the CPU, most compiers ignores it, and instead put on the stack with higher access priority.
*** Requesting this storgae for an object, means that you can't take its address with the address-of operator(&).
**** For cleaning up purposes: qApp is a good choice for "Ultimate ancestor" of any ophan QObject in an application.
* Namespaces
  an alias for a long namespace name can be introduced with command
#+BEGIN_SRC c++
namespace xyz=verycomplicatednamespace;
#+END_SRC
** anonymous Namespace
is accessible from that point down to the end of the file, similar to static global, or file scope identifier.
and it can eliminate the need for static globals.
#+BEGIN_SRC c++
namespace{
const int MAXSIZE = 256;
}

void f1(){
int s[MAXSIZE];
}
#+END_SRC
** Open Namespaces
   'Open' in the sense that you can add members to an existing namespace by declaring a seconf namespace with the same name, but with new items.
   to declare a static (global or namespace) object without defining it, use the keyword 'extern'.
* Pointers

  applying 'delete' ==> change heap memory used by the object from "in use" to "available".
                    ==> state of the pointer changes to "undefined" 
		    ==> second application of delete to same pointer may cause runtime problems, possible heap corruption
** to avoid repeated delete, it is good practice to assign 0 or NULL to a pointer immediately after it has been deleted.
   if delete is applied to a null pointer, there is no error and no action.
** reassigning a pointer will cause memory leak, as this will leave allocated memory with nothing pointing to it.
** Memory Access Summary 
**** 1 -The operators new and delete give the C++ programmer increased power and increased responsibility.
**** 2 -Improper use of pointers and dynamic memory can cause program crashes that result from heap corruption and memory leaks.
**** 3 -Qt and STL container classes permit the safe use of dynamic memory without adversely affecting performance.
**** 4 -In a multiple variable declaration, the unary * operator applies only to the variable that immediately follows it, not the type that precedes it.
**** 5 -Dereferencing an uninitialized pointer is a serious error that may not be caught by the compiler.
**** 6 -After delete has been applied to a pointer, the state of that pointer is undefined.
**** 7 -It is good practice to assign 0 or NULL to a pointer immediately after you delete it.
**** 8 -Applying delete to a non-null pointer that was not returned by new produces undefined results.
**** 9 -The compiler cannot be relied upon to detect the improper use of delete , so it is the programmer's responsibility to use delete correctly.
**** 10 -A memory leak is produced when a program causes memory to be allocated and then loses track of that memory so that it can neither be accessed nor delete d.
** Arrays
   #+BEGIN_SRC c++
   int a[]={10,11,12,13,14,15}; //normal definition of array which gives back pointer to the first element of the array.
   #+END_SRC
*** special syntax to define a dynamic array
    #+BEGIN_SRC c++
      uint n;
      ArrayType* pt;
      pt = new ArrayType[n];
      // to properly deallocate this array, use this syntax
      delete[] pt;
    #+END_SRC

   


